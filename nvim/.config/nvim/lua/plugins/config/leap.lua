local M = {}
M.opts = {
  max_phase_one_targets = nil,
  highlight_unlabeled_phase_one_targets = false,
  max_highlighted_traversal_targets = 20,
  case_sensitive = false,
  -- Sets of characters that should match each other.
  -- Obvious candidates are braces and quotes ('([{', ')]}', '`"\'').
  equivalence_classes = { " \t\r\n" },
  substitute_chars = {},
  -- Leaving the appropriate list empty effectively disables "smart" mode,
  -- and forces auto-jump to be on or off.
  -- safe_labels = { . . . },
  -- { "s", "f", "n", "u", "t",
  --   "S", "F", "N", "L", "H", "M", "U", "G", "T", "Z" },
  safe_labels = {
    "s",
    "f",
    "n",
    "u",
    "t",
    "a",
    "d",
    "j",
    "k",
    "l",
    "m",
    "u",
    "u",
    "e",
    "r",
  },
  labels = {
    "s",
    "f",
    "n",
    "j",
    "k",
    "l",
    "h",
    "o",
    "d",
    "w",
    "e",
    "m",
    "b",
    "u",
    "y",
    "v",
    "r",
    "g",
    "t",
    "c",
    "x",
    "z",
    "S",
    "F",
    "N",
    "J",
    "K",
    "L",
    "H",
    "O",
    "D",
    "W",
    "E",
    "M",
    "B",
    "U",
    "Y",
    "V",
    "R",
    "G",
    "T",
    "C",
    "X",
    "Z",
  },
  special_keys = {
    repeat_search = "<enter>",
    next_phase_one_target = "<enter>",
    next_target = { "<enter>", ";" },
    prev_target = { "<tab>", "," },
    next_group = "<space>",
    prev_group = "<tab>",
    multi_accept = "<enter>",
    multi_revert = "<backspace>",
  },
}
M.keys = {
      {
        "s",
        "<plug>(leap-forward-to)",
        mode = { "n", "v" },
        noremap = true,
        silent = true,
      },
      {
        "S",
        "<plug>(leap-backward-to)",
        mode = { "n", "v" },
        noremap = true,
        silent = true,
      },

      {
        "z",
        "<plug>(leap-forward-till)",
        mode = { "v", "o" },
        noremap = true,
        silent = true,
      },
      {
        "Z",
        "<plug>(leap-backward-till)",
        mode = { "v", "o" },
        noremap = true,
        silent = true,
      },
    }
return M
