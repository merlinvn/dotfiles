# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# open terminal, blazingly fast compared to iTerm/Hyper
# cmd - return : /Applications/kitty.app/Contents/MacOS/kitty --single-instance -d ~
cmd - return : /Applications/WezTerm.app/Contents/MacOS/wezterm start --always-new-process
cmd - tab : yabai -m space --focus recent

# open Brave Browser
# cmd + shift - return : /Applications/Brave\ Browser.app/Contents/MacOS/Brave\ Browser

# reload
alt + cmd - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"
alt + cmd - a : skhd --reload

# focus window
alt - left : yabai -m window --focus west
alt - down : yabai -m window --focus south
alt - up : yabai -m window --focus north
alt - right : yabai -m window --focus east

# cycle all windows on space by coordinates -> space index -> display index
alt - tab : yabai -m window --focus "$(yabai -m query --windows | jq -re "sort_by(.display, .space, .frame.x, .frame.y, .id) | map(select(.\"is-visible\" == true and .role != \"AXUnknown\")) | reverse | nth(index(map(select(.\"has-focus\" == true))) - 1).id")"

# move managed window
alt + shift - left : yabai -m window --warp west
alt + shift - down : yabai -m window --warp south
alt + shift - up : yabai -m window --warp north
alt + shift - right : yabai -m window --warp east

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
#cmd + alt - n : yabai -m space --create && \
                  #index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
                  #yabai -m window --space "${index}" && \
                  #yabai -m space --focus "${index}"

# fast focus desktop / splace
# alt + ctrl - j : yabai -m space --focus prev || yabai -m space --focus last
# alt + ctrl - k : yabai -m space --focus next || yabai -m space --focus first
# alt + shift - j :  yabai -m window --space prev || yabai -m window --space last && yabai -m space --focus prev || yabai -m space --focus last
# alt + shift - k :  yabai -m window --space next || yabai -m window --space first && yabai -m space --focus next || yabai -m space --focus first
# send window to desktop and follow focus
alt + ctrl - j : index=`expr $(yabai -m query --spaces --space | jq '.index') - 1` &&\
                        yabai -m space --focus "${index}"
alt + ctrl - k : index=`expr $(yabai -m query --spaces --space | jq '.index') + 1` &&\
                        yabai -m space --focus "${index}"
alt + shift - j : index=`expr $(yabai -m query --spaces --space | jq '.index') - 1` &&\
                        yabai -m window --space "${index}" &&\
                        yabai -m space --focus "${index}"
alt + shift - k : index=`expr $(yabai -m query --spaces --space | jq '.index') + 1` &&\
                        yabai -m window --space "${index}" &&\
                        yabai -m space --focus "${index}"

# focus monitor
alt + ctrl - h  : yabai -m display --focus prev || yabai -m display --focus last
alt + ctrl - l  : yabai -m display --focus next || yabai -m display --focus first
#ctrl + alt - down  : yabai -m display --focus recent

# send window to monitor and follow focus
alt + shift - h  : (yabai -m window --display prev && yabai -m display --focus prev) || (yabai -m window --display last && yabai -m display --focus last)
alt + shift - l : (yabai -m window --display next && yabai -m display --focus next) || (yabai -m window --display first && yabai -m display --focus first)
#alt + ctrl - down  : yabai -m window --display recent; yabai -m display --focus recent


# relative space/desktop on the current display
#alt - 1 : si="$(yabai -m query --displays --space | jq '.spaces[0]')" && yabai -m space --focus "${si}"
#alt - 2 : si="$(yabai -m query --displays --space | jq '.spaces[1]')" && yabai -m space --focus "${si}"
#alt - 3 : si="$(yabai -m query --displays --space | jq '.spaces[2]')" && yabai -m space --focus "${si}"
#alt - 4 : si="$(yabai -m query --displays --space | jq '.spaces[3]')" && yabai -m space --focus "${si}"
#alt - 5 : si="$(yabai -m query --displays --space | jq '.spaces[4]')" && yabai -m space --focus "${si}"
#alt - 6 : si="$(yabai -m query --displays --space | jq '.spaces[5]')" && yabai -m space --focus "${si}"
#alt - 7 : si="$(yabai -m query --displays --space | jq '.spaces[6]')" && yabai -m space --focus "${si}"
#alt - 8 : si="$(yabai -m query --displays --space | jq '.spaces[7]')" && yabai -m space --focus "${si}"
#alt - 9 : si="$(yabai -m query --displays --space | jq '.spaces[8]')" && yabai -m space --focus "${si}"
#alt - 0 : si="$(yabai -m query --displays --space | jq '.spaces[9]')" && yabai -m space --focus "${si}"

alt - 1 : yabai -m space --focus 1
alt - 2 : yabai -m space --focus 2
alt - 3 : yabai -m space --focus 3
alt - 4 : yabai -m space --focus 4
alt - 5 : yabai -m space --focus 5
alt - 6 : yabai -m space --focus 6
alt - 7 : yabai -m space --focus 7
alt - 8 : yabai -m space --focus 8
alt - 9 : yabai -m space --focus 9


#ctrl + cmd - down : yabai -m window --space recent | yabai -m space --focus recent

#alt + shift - 1 : si="$(yabai -m query --displays --space | jq '.spaces[0]')" ; yabai -m window --space "${si}"; yabai -m space --focus "${si}"
#alt + shift - 2 : si="$(yabai -m query --displays --space | jq '.spaces[1]')" ; yabai -m window --space "${si}"; yabai -m space --focus "${si}"
#alt + shift - 3 : si="$(yabai -m query --displays --space | jq '.spaces[2]')" ; yabai -m window --space "${si}"; yabai -m space --focus "${si}"
#alt + shift - 4 : si="$(yabai -m query --displays --space | jq '.spaces[3]')" ; yabai -m window --space "${si}"; yabai -m space --focus "${si}"
#alt + shift - 5 : si="$(yabai -m query --displays --space | jq '.spaces[4]')" ; yabai -m window --space "${si}"; yabai -m space --focus "${si}"
#alt + shift - 6 : si="$(yabai -m query --displays --space | jq '.spaces[5]')" ; yabai -m window --space "${si}"; yabai -m space --focus "${si}"
#alt + shift - 7 : si="$(yabai -m query --displays --space | jq '.spaces[6]')" ; yabai -m window --space "${si}"; yabai -m space --focus "${si}"
#alt + shift - 8 : si="$(yabai -m query --displays --space | jq '.spaces[7]')" ; yabai -m window --space "${si}"; yabai -m space --focus "${si}"
#alt + shift - 9 : si="$(yabai -m query --displays --space | jq '.spaces[8]')" ; yabai -m window --space "${si}"; yabai -m space --focus "${si}"
#alt + shift - 0 : si="$(yabai -m query --displays --space | jq '.spaces[9]')" ; yabai -m window --space "${si}"; yabai -m space --focus "${si}"

shift + alt - 1 : yabai -m window --space 1; yabai -m space --focus 1
shift + alt - 2 : yabai -m window --space 2; yabai -m space --focus 2
shift + alt - 3 : yabai -m window --space 3; yabai -m space --focus 3
shift + alt - 4 : yabai -m window --space 4; yabai -m space --focus 4
shift + alt - 5 : yabai -m window --space 5; yabai -m space --focus 5
shift + alt - 6 : yabai -m window --space 6; yabai -m space --focus 6
shift + alt - 7 : yabai -m window --space 7; yabai -m space --focus 7
shift + alt - 8 : yabai -m window --space 8; yabai -m space --focus 8
shift + alt - 9 : yabai -m window --space 9; yabai -m space --focus 9

# maximize window in bsp mode
alt + shift - m : yabai -m window --toggle zoom-fullscreen
# alt - f : yabai -m window --toggle native-fullscreen

# toggle window zoom
alt + shift - z : yabai -m window --toggle zoom-parent

# float / unfloat window and center on screen
alt + shift - t : yabai -m window --toggle float;\
                  yabai -m window --grid 6:6:1:1:4:4

# toggle window split type
alt + shift - s : yabai -m window --toggle split
alt + shift - r : yabai -m space --rotate 270

# toggle space layout mode
# todo combine with fill screen below for all floating windows
# alt + shift - o : yabai -m space --layout $(yabai -m query --spaces --space | jq -r 'if .type == "bsp" then "float" else "bsp" end')
alt + shift - q : yabai -m space --layout bsp
alt + shift - w : yabai -m space --layout stack
alt + shift - f : yabai -m space --layout float

# balance size of windows
alt + shift - b : yabai -m space --balance

### Floating Window Management ###

#The grid format is <rows>:<cols>:<start-x>:<start-y>:<width>:<height>
# make floating window fill screen / maximize
cmd + alt - m : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# TODO: implement snapping top bottom
cmd + alt - left : yabai -m window --grid 1:2:0:0:1:1
cmd + alt - right : yabai -m window --grid 1:2:1:0:1:1
# center floating window
cmd + alt - c : yabai -m window --grid 6:6:1:1:4:4

# move floating window
cmd + alt - h : yabai -m window --move rel:-20:0
cmd + alt - j : yabai -m window --move rel:0:20
cmd + alt - k : yabai -m window --move rel:0:-20
cmd + alt - l : yabai -m window --move rel:20:0


#### Resize windows in both bsp and float mode ####
# increase window size
ctrl + alt - left : yabai -m window --resize right:-20:0
ctrl + alt - right : yabai -m window --resize right:20:0
# cmd + alt - w : yabai -m window --resize top:0:-20

# decrease window size
ctrl + alt - down : yabai -m window --resize bottom:0:20
ctrl + alt - up :   yabai -m window --resize bottom:0:-20


# toggle sticky(+float), topmost, picture-in-picture
# alt + shift - p : yabai -m window --toggle sticky;\
#                   yabai -m window --toggle topmost;\
#                   yabai -m window --toggle pip

# toggle window border
# alt + shift - b : yabai -m window --toggle border


# prevents skhd from monitoring events for listed processes.
# .blacklist [
#     "terminal"
#     "qutebrowser"
#     "kitty"
#     "google chrome"
# ]



# alt - f5  : index="$(yabai -m query --spaces --display 1 | jq '.[0].index')" &&\
#                   yabai -m space --focus "${index}"
# alt - f6  : index="$(yabai -m query --spaces --display 1 | jq '.[1].index')" &&\
#                   yabai -m space --focus "${index}"
# alt - f7  : index="$(yabai -m query --spaces --display 1 | jq '.[2].index')" &&\
#                   yabai -m space --focus "${index}"
# alt - f8  : index="$(yabai -m query --spaces --display 1 | jq '.[3].index')" &&\
#                   yabai -m space --focus "${index}"
# alt - f1  : index="$(yabai -m query --spaces --display 2 | jq '.[0].index')" &&\
#                   yabai -m space --focus "${index}"
# alt - f2  : index="$(yabai -m query --spaces --display 2 | jq '.[1].index')" &&\
#                   yabai -m space --focus "${index}"
# alt - f3  : index="$(yabai -m query --spaces --display 2 | jq '.[2].index')" &&\
#                   yabai -m space --focus "${index}"
# alt - f4  : index="$(yabai -m query --spaces --display 2 | jq '.[3].index')" &&\
#                   yabai -m space --focus "${index}"
# alt - f9  : index="$(yabai -m query --spaces --display 3 | jq '.[0].index')" &&\
#                   yabai -m space --focus "${index}"
# alt - f10  : index="$(yabai -m query --spaces --display 3 | jq '.[1].index')" &&\
#                   yabai -m space --focus "${index}"
# alt - f11  : index="$(yabai -m query --spaces --display 3 | jq '.[2].index')" &&\
#                   yabai -m space --focus "${index}"
# alt - f12 : index="$(yabai -m query --spaces --)": index="$(yabai -m query --spaces --display 3 | jq '.[3].index')" &&\
#                   yabai -m space --focus "${index}"
#
# cmd + alt - f5  : index="$(yabai -m query --spaces --display 1 | jq '.[0].index')";\
#                   yabai -m window --space "${index}"; yabai -m space --focus "${index}"
# cmd + alt - f6  : index="$(yabai -m query --spaces --display 1 | jq '.[1].index')";\
#                   yabai -m window --space "${index}"; yabai -m space --focus "${index}"
# cmd + alt - f7  : index="$(yabai -m query --spaces --display 1 | jq '.[2].index')" &&\
#                   yabai -m window --space "${index}" && yabai -m space --focus "${index}"
# cmd + alt - f8  : index="$(yabai -m query --spaces --display 1 | jq '.[3].index')" &&\
#                   yabai -m window --space "${index}" && yabai -m space --focus "${index}"
# cmd + alt - f1  : index="$(yabai -m query --spaces --display 2 | jq '.[0].index')" &&\
#                   yabai -m window --space "${index}" && yabai -m space --focus "${index}"
# cmd + alt - f2  : index="$(yabai -m query --spaces --display 2 | jq '.[1].index')" &&\
#                   yabai -m window --space "${index}" && yabai -m space --focus "${index}"
# cmd + alt - f3  : index="$(yabai -m query --spaces --display 2 | jq '.[2].index')" &&\
#                   yabai -m window --space "${index}" && yabai -m space --focus "${index}"
# cmd + alt - f4  : index="$(yabai -m query --spaces --display 2 | jq '.[3].index')" &&\
#                   yabai -m window --space "${index}" && yabai -m space --focus "${index}"
# cmd + alt - f9  : index="$(yabai -m query --spaces --display 3 | jq '.[0].index')" &&\
#                   yabai -m window --space "${index}" && yabai -m space --focus "${index}"
# cmd + alt - f10  : index="$(yabai -m query --spaces --display 3 | jq '.[1].index')" &&\
#                   yabai -m window --space "${index}" && yabai -m space --focus "${index}"
# cmd + alt - f11  : index="$(yabai -m query --spaces --display 3 | jq '.[2].index')" &&\
#                   yabai -m window --space "${index}" && yabai -m space --focus "${index}"
# cmd + alt - f12  : index="$(yabai -m query --spaces --display 3 | jq '.[3].index')" &&\
#                   yabai -m window --space "${index}" && yabai -m space --focus "${index}"
#
