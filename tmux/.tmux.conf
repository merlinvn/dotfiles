# https://leanpub.com/the-tao-of-tmux/read

# set -g default-terminal "xterm-256color"
# if-shell '[[ $(uname -s) = Linux ]]' {
# if-shell "uname | grep -q Linux"{
  # set -g default-terminal "xterm-256color"
  # set -sa terminal-overrides ',xterm-256color:Tc'
# }

# Set the base index for windows and panes to 1 instead 0
set -g base-index 1
setw -g pane-base-index 1 # setw is set-window-option

#setting the delay between prefix and command
set -sg escape-time 0

# set -g default-terminal "screen-256color"
# set -s default-terminal "tmux-256color"
set -g default-terminal "${TERM}"

set -ga terminal-overrides ",*:Tc" # this is for 256 color
set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q' # this is for the cursor shape
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

# Automatically set window title
set-window-option -g automatic-rename on
set-option -g set-titles on

#set -g default-terminal screen-256color
set -g status-keys vi
setw -g mode-keys vi
set -g history-limit 10000

# enable activity alerts
setw -g monitor-activity off
setw -g visual-activity off

set -g mouse on
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M
bind -n C-WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M
bind -T copy-mode-vi    C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-vi    C-WheelDownPane send-keys -X halfpage-down
bind -T copy-mode-emacs C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-emacs C-WheelDownPane send-keys -X halfpage-down

# recommended by neovim??? for 'focus-events'
set-option -g focus-events on

unbind C-b
set-option -g prefix 'C-a'
# Ensure that we can send C-a to other apps by pressing C-a twice
bind 'C-a' send-prefix


# reload config
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# splitting panes with | and _
bind v split-window -h
bind s split-window -v

# resizing panes
# bind -rn M-S-Left resize-pane -L
# bind -rn M-S-Down resize-pane -D
# bind -rn M-S-Up resize-pane -U
# bind -rn M-S-Right resize-pane -R

# Use Alt-arrow keys without prefix key to switch panes
# bind -n M-Left select-pane -L
# bind -n M-Right select-pane -R
# bind -n M-Up select-pane -U
# bind -n M-Down select-pane -D

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n C-j if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n C-k if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n C-l if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

bind-key -n C-Left if-shell "$is_vim" 'send-keys C-Left' 'resize-pane -L 3'
bind-key -n C-Down if-shell "$is_vim" 'send-keys C-Down' 'resize-pane -D 3'
bind-key -n C-Up if-shell "$is_vim" 'send-keys C-Up' 'resize-pane -U 3'
bind-key -n C-Right if-shell "$is_vim" 'send-keys C-Right' 'resize-pane -R 3'

# tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \


# Shift arrow to switch windows
bind -n S-Left  previous-window
bind -n S-Right next-window

bind -n C-Tab  previous-window
bind -n C-S-Tab next-window

#Swapping Tmux windows
bind-key -n C-S-Left swap-window -t -1\; select-window -t -1
bind-key -n C-S-Right swap-window -t +1\; select-window -t +1

# copy mode
# bind-key -T copy-mode-vi Y send-keys -X copy-selection
# bind-key -T copy-mode-vi y send-keys -X copy-selection

# in MacOS use pbcopy to copy to clipboard
# in Lunux use xclip to copy to clipboard
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

bind-key -T copy-mode-vi Y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'pbcopy -in -selection clipboard'
bind-key -T copy-mode-vi v send-keys -X begin-selection

bind-key -T copy-mode-vi l send-keys -X start-of-line
bind-key -T copy-mode-vi L send-keys -X end-of-line

bind-key -T copy-mode-vi N send-keys -X top-line
bind-key -T copy-mode-vi E send-keys -X middle-line
bind-key -T copy-mode-vi I send-keys -X bottom-line

bind Escape copy-mode
unbind p
bind p paste-buffer

bind C-c run "tmux save-buffer - | xclip -i -sel clipboard"
bind C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"

# automatically copy when mouse is released
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy -in -selection clipboard"

# vim-like pane switching
# bind -r ^ last-window

# bind -r D neww -c "#{pane_current_path}" "[[ -e TODO.md ]] && nvim TODO.md || nvim ~/dotfiles/todo.md"

# bind-key -r ? run-shell "tmux neww ~/dotfiles/tmux-cht.sh"

# bind-key -r i run-shell "tmux neww bash -c \"~/.local/bin/tmux-cht.sh\""
# bind-key -r G run-shell "~/.local/bin/tmux-sessionizer /home/theprimeagen/work/nrdp"
# bind-key -r C run-shell "~/.local/bin/tmux-sessionizer /home/theprimeagen/work/tvui"
# bind-key -r R run-shell "~/.local/bin/tmux-sessionizer /home/theprimeagen/work/milo"
# # bind-key -r L run-shell "~/.local/bin/tmux-sessionizer /home/theprimeagen/work/hpack"
# bind-key -r H run-shell "~/.local/bin/tmux-sessionizer /home/theprimeagen/personal/vim-with-me"
# bind-key -r T run-shell "~/.local/bin/tmux-sessionizer /home/theprimeagen/personal/refactoring.nvim"
# bind-key -r N run-shell "~/.local/bin/tmux-sessionizer /home/theprimeagen/personal/harpoon"
# bind-key -r S run-shell "~/.local/bin/tmux-sessionizer /home/theprimeagen/personal/developer-productivity"

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'dracula/tmux'

# dracula customizations
set -g @dracula-plugins "cpu-usage ram-usage battery weather time"
set -g @dracula-show-left-icon session
set -g @dracula-show-powerline true
set -g @dracula-show-fahrenheit false
set -g @dracula-show-location false
set -g @dracula-military-time true
set -g @dracula-show-timezone false
set -g @dracula-cpu-display-load false
set -g @dracula-show-flags true
# set -g status-position top

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
